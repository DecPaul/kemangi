/*
Merupakan wrapper untuk:
====================================================
Program Porter Stemming
====================================================
Generated by : Andi Sholihin
Email		 : dieka.91@gmail.com
Blog 		 : http://sekedar-tutorial.blogspot.com
====================================================

yang dimodifikasi untuk membantu mahasiswa Teknik UI untuk keperluan skripsi.
- William Gozali (will.gozali@gmail.com)

changelog:
6 April 2015 - selesai modifikasi untuk membuang kata yg terlalu jarang/sering muncul
22 April 2015 - tambahan fitur substitusi kata
*/

#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string>
#include <vector>
#include <set>
#include <map>
#include <cassert>

#define REP(a,b) for (int a = 0; a < b; a++)

using namespace std;

bool twitter_mode;
bool stem_mode;
set<char> stop_char;
set<string> kamus;
set<vector<string> > kata_terlarang;
vector<vector<string> > buffer;
map<vector<string>, vector<string> > kata_pengganti;

map<string, int> frekuensi;
double remove_less_freq, remove_more_freq;

int clamp(int a, int b, int c){
	return max(a, min(b, c));
}

vector<string> tokenize(char sc[]){
	vector<string> temp;
	temp.clear();

	// tokenize
	int len = strlen(sc);
	string cur = "";
	REP(i,len){
		if (sc[i] == ' '){
			if (cur != ""){
				temp.push_back(cur);
			}
			cur = "";
		}else{
			cur += sc[i];
		}
	}
	if (cur != ""){
		temp.push_back(cur);
	}

	return temp;
}

void to_lower_case(char sc[]){
	int le = strlen(sc);
	REP(i,le){
		if (('A' <= sc[i]) && (sc[i] <= 'Z')){
			sc[i] += 32;
		}
	}
}

void normalize(string &kata, int &pos){
	if (pos < 0) {
		pos = (int)kata.length() + pos;
	}

	if (pos < 0) pos = 0;
	if (pos >= kata.length()) pos = kata.length()-1;
}

string homemade_substr(string kata, int pos){
	normalize(kata, pos);
	return kata.substr(pos);
}

string homemade_substr(string kata, int a, int b){
	normalize(kata, a);
	normalize(kata, b);
	return kata.substr(a,b-a);
}

string append(string a, string b){
	a += b;
	return a;
}

bool cari(string kata){
	return kamus.count(kata);
}

bool terlarang(vector<string> frase){
	return kata_terlarang.count(frase);
}

bool elemen_twitter(string kata){
	if (kata == "rt") return 1;
	if ((kata.length() > 4) && (homemade_substr(kata, 0, 4) == "http")) return 1;
	if ((kata.length() > 1) && (kata[0] == '@')) return 1;
	if ((kata.length() > 1) && (kata[0] == '#')) return 1;

	return 0;
}


//langkah 1 - hapus partikel
string hapus_partikel(string kata){
	if (!cari(kata)){
		if((homemade_substr(kata, -3) == "kah" )||( homemade_substr(kata, -3) == "lah" )||( homemade_substr(kata, -3) == "pun" )){
			kata = homemade_substr(kata, 0, -3);			
		}
	}
	return kata;
}

//langkah 2 - hapus possesive pronoun
string hapus_pp(string kata){
	if(cari(kata)!=1){
		if(kata.length() > 4){
			if((homemade_substr(kata, -2)== "ku")||(homemade_substr(kata, -2)== "mu")){
				kata = homemade_substr(kata, 0, -2);
			}else if((homemade_substr(kata, -3)== "nya")){
				kata = homemade_substr(kata,0, -3);
			}
	  	}
	}
	return kata;
}

//langkah 3 hapus first order prefiks (awalan pertama)
string hapus_awalan1(string kata){
	if(!cari(kata)){
		if(homemade_substr(kata,0,4)=="meng"){
			if(homemade_substr(kata,4,1)=="e"||homemade_substr(kata,4,1)=="u"){
				kata = append("k", homemade_substr(kata,4));
			}else{
				kata = homemade_substr(kata,4);
			}
		}else if(homemade_substr(kata,0,4)=="meny"){
			kata = append("s", homemade_substr(kata,4));
		}else if(homemade_substr(kata,0,3)=="men"){
			kata = homemade_substr(kata,3);
		}else if(homemade_substr(kata,0,3)=="mem"){
			if(homemade_substr(kata,3,1)=="a" || homemade_substr(kata,3,1)=="i" || homemade_substr(kata,3,1)=="e" || homemade_substr(kata,3,1)=="u" || homemade_substr(kata,3,1)=="o"){
				kata = append("p", homemade_substr(kata,3));
			}else{
				kata = homemade_substr(kata,3);
			}
		}else if(homemade_substr(kata,0,2)=="me"){
			kata = homemade_substr(kata,2);
		}else if(homemade_substr(kata,0,4)=="peng"){
			if(homemade_substr(kata,4,1)=="e" || homemade_substr(kata,4,1)=="a"){
				kata = append("k", homemade_substr(kata,4));
			}else{
				kata = homemade_substr(kata,4);
			}
		}else if(homemade_substr(kata,0,4)=="peny"){
			kata = append("s", homemade_substr(kata,4));
		}else if(homemade_substr(kata,0,3)=="pen"){
			if(homemade_substr(kata,3,1)=="a" || homemade_substr(kata,3,1)=="i" || homemade_substr(kata,3,1)=="e" || homemade_substr(kata,3,1)=="u" || homemade_substr(kata,3,1)=="o"){
				kata = append("t", homemade_substr(kata,3));
			}else{
				kata = homemade_substr(kata,3);
			}
		}else if(homemade_substr(kata,0,3)=="pem"){
			if(homemade_substr(kata,3,1)=="a" || homemade_substr(kata,3,1)=="i" || homemade_substr(kata,3,1)=="e" || homemade_substr(kata,3,1)=="u" || homemade_substr(kata,3,1)=="o"){
				kata = append("p", homemade_substr(kata,3));
			}else{
				kata = homemade_substr(kata,3);
			}
		}else if(homemade_substr(kata,0,2)=="di"){
			kata = homemade_substr(kata,2);
		}else if(homemade_substr(kata,0,3)=="ter"){
			kata = homemade_substr(kata,3);
		}else if(homemade_substr(kata,0,2)=="ke"){
			kata = homemade_substr(kata,2);
		}
	}
	return kata;
}

//langkah 4 hapus second order prefiks (awalan kedua)
string hapus_awalan2(string kata){
	if(!cari(kata)){
		if(homemade_substr(kata,0,3)=="ber"){
			kata = homemade_substr(kata,3);
		}else if(homemade_substr(kata,0,3)=="bel"){
			kata = homemade_substr(kata,3);
		}else if(homemade_substr(kata,0,2)=="be"){
			kata = homemade_substr(kata,2);
		}else if(homemade_substr(kata,0,3)=="per" && kata.length() > 5){
			kata = homemade_substr(kata,3);
		}else if(homemade_substr(kata,0,2)=="pe"  && kata.length() > 5){
			kata = homemade_substr(kata,2);
		}else if(homemade_substr(kata,0,3)=="pel"  && kata.length() > 5){
			kata = homemade_substr(kata,3);
		}else if(homemade_substr(kata,0,2)=="se"  && kata.length() > 5){
			kata = homemade_substr(kata,2);
		}
	}
	return kata;
}

//langkah 5 hapus suffiks
string hapus_akhiran(string kata){
	if(!cari(kata)){

		if (homemade_substr(kata, -3) == "kan" ){
			kata = homemade_substr(kata, 0, -3);
		}
		else if(homemade_substr(kata, -1)== "i" ){
		    kata = homemade_substr(kata, 0, -1);
		}else if(homemade_substr(kata, -2)== "an"){
			kata = homemade_substr(kata, 0, -2);
		}
	}	

	return kata;
}

string stem(string s){
	return hapus_akhiran(hapus_awalan2(hapus_awalan1(hapus_pp(hapus_partikel(s)))));
}

void buka_file_karakter(string nama, set<char> &v){
	FILE *in = fopen(nama.c_str(), "r");

	char sc[100];
	string s;
	while (fscanf(in, "%s", sc) == 1){
		v.insert(sc[0]);
	}

	printf("selesai membuka %d karakter dari %s\n", (int)v.size(), nama.c_str());
}

void buka_file_kata(string nama, set<string> &v){
	FILE *in = fopen(nama.c_str(), "r");

	char sc[100];
	string s;
	while (fscanf(in, "%s", sc) == 1){
		s = sc;
		v.insert(s);
	}

	printf("selesai membuka %d kata dari %s\n", (int)v.size(), nama.c_str());
}

void buka_file_frase(string nama, set<vector<string> > &v){
	FILE *in = fopen(nama.c_str(), "r");

	char sc[100];
	string s;
	while (fscanf(in, "%[^\n]\n", sc) == 1){
		vector<string> t = tokenize(sc);
		v.insert(t);
	}

	printf("selesai membuka %d kata dari %s\n", (int)v.size(), nama.c_str());
}

void buka_file_pasangan(string nama, map<vector<string>,vector<string> > &m){
	FILE *in = fopen(nama.c_str(), "r");

	char sc1[100], sc2[100];
	while (fscanf(in, "%[^~]~%[^\n]\n", sc1, sc2) == 2){
		vector<string> s1 = tokenize(sc1);
		vector<string> s2 = tokenize(sc2);
		m[s1] = s2;
	}

	printf("selesai membuka %d kata dari %s\n", (int)m.size(), nama.c_str());
}

void filter_stopword(vector<string> &v){
	vector<string> ret;
	ret.clear();

	int i = 0;
	while (i < v.size()){
		bool skip = 0;
		vector<string> t;
		t.clear();
		for (int j = i; j < v.size(); j++){
			t.push_back(v[j]);
		
			if (terlarang(t)){
				i = j;
				skip = 1;
				break;		
			}
		}

		if (!skip){
			ret.push_back(v[i]);
		}
		i++;
	}

	v = ret;
}

void filter_substitution(vector<string> &v){
	vector<string> ret;
	ret.clear();

	int i = 0;
	while (i < v.size()){
		bool skip = 0;
		vector<string> t;
		vector<string> t_baru;
		t.clear();
		for (int j = i; j < v.size(); j++){
			t.push_back(v[j]);
		
			if (kata_pengganti.count(t)){
				skip = 1;
				i = j;
				t_baru = kata_pengganti[t];
			}
		}

		if (!skip){
			ret.push_back(v[i]);
		}else{
			for (int j = 0; j < t_baru.size(); j++){
				ret.push_back(t_baru[j]);
			}
		}
		i++;
	}

	v = ret;
}

void filter_stopchar(vector<string> &v){
	vector<string> ret;
	ret.clear();

	REP(i,v.size()){
		string cur = "";
		REP(j,v[i].length()){
			if (stop_char.count(v[i][j])){
				if (cur != ""){
					ret.push_back(cur);
				}
				cur = "";
			}else{
				cur += v[i][j];
			}
		}
		if (cur != ""){
			ret.push_back(cur);
		}
	}

	v = ret;
}

void filter_twitter(vector<string> &v){
	REP(i,v.size()){
		if (elemen_twitter(v[i])){
			// remove
			v.erase(v.begin() + i);
			i--;
		}
	}
}

void filter_stem(vector<string> &v){
	REP(i,v.size()){
		v[i] = stem(v[i]);
	}
}

void daftarkan_frekuensi(const vector<string> &v){
	REP(i,v.size()){
		frekuensi[v[i]]++;
	}
}

vector<pair<int,string> > get_sorted_frekuensi(){
	vector<pair<int,string> > freq_word_pair;
	for (map<string,int>::iterator it = frekuensi.begin(); it != frekuensi.end(); it++){
		freq_word_pair.push_back(make_pair(it->second, it->first));
	}
	sort(freq_word_pair.begin(), freq_word_pair.end());

	return freq_word_pair;
}

void get_batas_frekuensi(int &l_bound, int &u_bound){
	vector<pair<int,string> > freq_word_pair = get_sorted_frekuensi();

	int l = clamp(0, (int)(frekuensi.size() * remove_less_freq/100), frekuensi.size()-1);
	int u = clamp(0, (int)(frekuensi.size() * (100 - remove_more_freq)/100), frekuensi.size()-1);

	l_bound = freq_word_pair[l].first;
	u_bound = freq_word_pair[u].first;
}

void filter_frekuensi(vector<string> &v, int lb, int ub){
	vector<string> ret;

	REP(i,v.size()){
		int f = frekuensi[v[i]];
		if ((lb <= f) && (f <= ub)){
			ret.push_back(v[i]);
		}
	}

	v.clear();
	v = ret;
}

void print_frekuensi(){
	FILE *out = fopen("frekuensi_kata.txt", "w");

	vector<pair<int,string> > freq_word_pair = get_sorted_frekuensi();
	REP(i,freq_word_pair.size()){
		fprintf(out, "%s\t%d\n", freq_word_pair[i].second.c_str(), freq_word_pair[i].first);
	}

	fclose(out);
}

void print_buffer(){
	FILE *out = fopen("hasil.txt", "w");

	REP(i,buffer.size()){
		REP(j,buffer[i].size()){
			fprintf(out, "%s", buffer[i][j].c_str());
			if (j+1 < buffer[i].size()) fprintf(out, " ");
		}
		fprintf(out, "\n");
	}

	fclose(out);
}

void proses(string nama){
	FILE *in = fopen(nama.c_str(), "r");

	char sc[1000];
	string s;
	vector<string> temp;
	int baris = 0;
	while (fscanf(in, "%[^\n]\n", sc) == 1){
		printf("memproses baris %d...\n", ++baris);

		to_lower_case(sc);
		temp = tokenize(sc);

		// filter
		filter_substitution(temp);

		if (twitter_mode){
			filter_twitter(temp);
		}

		filter_stopchar(temp);
		filter_stopword(temp);

		if (stem_mode){
			filter_stem(temp);
		}

		daftarkan_frekuensi(temp);
		buffer.push_back(temp);
	}

	printf("selesai memproses seluruh kata\n");

	int lb, ub;
	get_batas_frekuensi(lb, ub);
	printf("frekuensi batas: [%d, %d]\n", lb, ub);
	REP(i,buffer.size()){
		filter_frekuensi(buffer[i], lb, ub);
	}

	print_frekuensi();
	print_buffer();
}

void init(){
	char sc[100];
	string s;

	buka_file_kata("kamus.txt", kamus);
	buka_file_karakter("stopchar.txt", stop_char);
	buka_file_frase("stopword.txt", kata_terlarang);
	buka_file_pasangan("substitusi.txt", kata_pengganti);

	printf("Butuh hapus mention, url, hashtag? (Y/t)\n");
	scanf("%s", sc);
	twitter_mode = (sc[0] == 'Y') ? 1 : 0;

	printf("Butuh stemming? (Y/t)\n");
	scanf("%s", sc);
	stem_mode = (sc[0] == 'Y') ? 1 : 0;

	printf("Butuh pembuangan beberapa kata paling sering/jarang muncul (aplikasi hukum Zipf)? (Y/t)\n");
	scanf("%s", sc);
	if (sc[0] == 'Y'){
		printf("Buang berapa persen kata paling jarang? (contoh: 5 (untuk 5%%), 7.5 (untuk 7.5%%))\n");
		scanf("%lf", &remove_less_freq);

		printf("Buang berapa persen kata paling sering? (contoh: 5 (untuk 5%%), 7.5 (untuk 7.5%%))\n");
		scanf("%lf", &remove_more_freq);
	}

	printf("Masukkan nama file yang berisi daftar kalimat yang ingin diproses:\n");
	scanf("%s", sc);
	s = sc;

	proses(s);
}

int main(){
	init();
	printf("program berakhir tanpa masalah\n");
}